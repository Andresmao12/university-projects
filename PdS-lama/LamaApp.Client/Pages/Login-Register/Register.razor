@page "/register"

@using Microsoft.AspNetCore.Components.Forms
@using System.Text.Json;
@using LamaApp.Shared
@using LamaApp.Client.Pages.Layout
@using LamaApp.Client.Services.Capitulos
@using LamaApp.Client.Services.Usuario;


@layout MainLayout
@inject IUsuarioService usuarioService
@inject ICapituloService capituloService
@inject HttpClient httpClient

<div class="container my-5">
    @if (formSubmitted)
    {
        <div class="alert alert-success" role="alert">
            @($"El usuario {user.NombreUsuario} ha sido registrado con éxito.")
        </div>
    }
    @if (formError)
    {
        <div class="alert alert-danger" role="alert">
            @(mensajeError)
        </div>
    }

    <div class="row">
        <div class="col-10">
            <h2 class="text-uppercase">Latin American Motorcycles Assoc.</h2>
            <p>Formulario de Membresía</p>
        </div>
        <div class="col-2 d-flex justify-content-end align-items-start gap-2">
            <button class="btn btn-outline-dark" onclick="window.location.href = '/login'">Login</button>
            <button class="btn btn-outline-danger" onclick="window.location.href = '/'"><i class="fa-solid fa-house"></i></button>
        </div>
    </div>

    <EditForm Model="@user" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />

        @* Pensado para usar las validaciones de las clases internas o relacionadas (Contacto, moto, pareja) pero no funciona *@
        <ObjectGraphDataAnnotationsValidator />

@*         <ValidationSummary /> *@

        <h4>Cuenta</h4>
        <div class="row mb-3">
            <div class="col">
                <label for="usuario" class="form-label">Nombre de usuario</label>
                <InputText type="text" class="form-control" id="usuario" placeholder="Usuario" @bind-Value="user.NombreUsuario" />
                <ValidationMessage For="@(() => user.NombreUsuario)" />
            </div>
            <div class="col">
                <label for="capitulo" class="form-label">Seleccione un capítulo</label>
                <InputSelect @bind-Value="user.IdCapitulo" class="form-select" id="capitulo">
                    <option value="">Seleccione un capítulo</option>
                    @if (capitulos != null && capitulos.Count > 0)
                    {
                        @foreach (var capitulo in capitulos)
                        {
                            <option value="@capitulo.IdCapitulo">@capitulo.Nombre</option>
                        }
                    }
                    else
                    {
                        <option disabled>Cargando capítulos...</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => user.IdCapitulo)" />
            </div>
        </div>

        <div class="row mb-3">
            <div class="col">
                <label for="contrasena" class="form-label">Contraseña</label>
                <InputText type="password" class="form-control" id="contrasena" placeholder="Contraseña" autocomplete="off" @bind-Value="user.Contraseña" />
                <ValidationMessage For="@(() => user.Contraseña)" />
            </div>
            <div class="col">
                <label for="confirmContrasena" class="form-label">Confirmar contraseña</label>
                <InputText type="password" class="form-control" id="ConfirmContrasena" placeholder="Contraseña" autocomplete="off" @bind-Value="confirmContrasena" />
                @if (!string.IsNullOrEmpty(confirmContrasena) && !string.Equals(user.Contraseña, confirmContrasena))
                {
                    <span class="text-danger">Las contraseñas no coinciden.</span>
                }
            </div>
        </div>

        <h4>Datos Personales</h4>

        <div class="row mb-3">
            <div class="col">
                <label for="nombres" class="form-label">Nombres</label>
                <InputText type="text" class="form-control" id="nombres" placeholder="Nombres" @bind-Value="user.Nombre" />
                <ValidationMessage For="@(() => user.Nombre)" />
            </div>
            <div class="col">
                <label for="apellidos" class="form-label">Apellidos</label>
                <InputText type="text" class="form-control" id="apellidos" placeholder="Apellidos" @bind-Value="user.Apellido" />
                <ValidationMessage For="@(() => user.Apellido)" />
            </div>
        </div>
        <div class="row mb-3">
            <div class="col">
                <label for="identificacion" class="form-label">Identificación</label>
                <InputText type="text" class="form-control" id="identificacion" placeholder="Número de Identificación" @bind-Value="user.Cedula" />
                <ValidationMessage For="@(() => user.Cedula)" />
            </div>
            <div class="col">
                <label for="tipo" class="form-label">Tipo de documento</label>
                <select class="form-select" id="tipo">
                    <option selected>Seleccione</option>
                    <option>Cédula</option>
                    <option>Pasaporte</option>
                </select>
               
            </div>
        </div>
        <div class="row mb-3">
            <div class="col">
                <label for="fechaNacimiento" class="form-label">Fecha Nacimiento</label>
                <InputDate class="form-control" id="fechaNacimiento" @bind-Value="user.FechaNacimiento" />
                <ValidationMessage For="@(() => user.FechaNacimiento)" />
            </div>
            <div class="col">
                <label for="lugar" class="form-label">Lugar</label>
                <input type="text" class="form-control" id="lugar" placeholder="Lugar de nacimiento" />
            </div>
        </div>
        <div class="mb-3">
            <label for="direccionResidencia" class="form-label">Dirección Residencia</label>
            <InputText type="text" class="form-control" id="direccionResidencia" placeholder="Dirección de residencia" @bind-Value="user.Contacto.Direccion" />
            <ValidationMessage For="@(() => user.Contacto.Direccion)" />
        </div>

        <div class="row mb-3">
            <div class="col">
                <label for="celular" class="form-label">Celular</label>
                <InputText type="text" class="form-control" id="celular" placeholder="Número de celular" @bind-Value="user.Contacto.Celular" />
                <ValidationMessage For="@(() => user.Contacto.Celular)" />
            </div>

            <div class="col">
                <label for="inpCorreo" class="form-label">Correo</label>
                <InputText type="email" class="form-control" id="inpCorreo" placeholder="Correo" @bind-Value="user.Contacto.Correo" />
                <ValidationMessage For="@(() => user.Contacto.Correo)" />
            </div>
        </div>

        <h4>Datos Familiares</h4>

        <div class="row mb-3">
            <div class="col">
                <label for="nombrePareja" class="form-label">Nombre de la Pareja</label>
                <InputText type="text" class="form-control" id="nombrePareja" placeholder="Nombre de la pareja" @bind-Value="user.Pareja.Nombre" />
                <ValidationMessage For="@(() => user.Pareja.Nombre)" />
            </div>

            <div class="col">
                <label for="identificacionPareja" class="form-label">Número de identificación</label>
                <InputText type="text" class="form-control" id="identificacionPareja" placeholder="ID de la pareja" @bind-Value="user.Pareja.Cedula" />
                <ValidationMessage For="@(() => user.Pareja.Cedula)" />
            </div>  
        </div>

        <h4>Datos de Vehículo Actual</h4>
        <div class="row mb-3">
            <div class="col">
                <label for="marcaMoto" class="form-label">Marca de Moto</label>
                <InputText type="text" class="form-control" id="marcaMoto" placeholder="Marca de Moto" @bind-Value="user.Motocicleta.Marca" />
                <ValidationMessage For="@(() => user.Motocicleta.Marca)" />
            </div>
            <div class="col">
                <label for="modeloMoto" class="form-label">Modelo</label>
                <InputText type="text" class="form-control" id="modeloMoto" placeholder="Modelo" @bind-Value="user.Motocicleta.Modelo" />
                <ValidationMessage For="@(() => user.Motocicleta.Modelo)" />
            </div>
            <div class="col">
                <label for="inpCilindrada" class="form-label">Cilindrada</label>
                <InputNumber type="number" class="form-control" id="inpCilindrada" placeholder="Cilindrada" @bind-Value="user.Motocicleta.Cilindrada" />
                <ValidationMessage For="@(() => user.Motocicleta.Cilindrada)" />
            </div>
            <div class="col">
                <label for="inpPlaca" class="form-label">Placa</label>
                <InputText type="text" class="form-control" id="inpPlaca" placeholder="Placa" @bind-Value="user.Motocicleta.Placa" />
                <ValidationMessage For="@(() => user.Motocicleta.Placa)" />
            </div>
        </div>

        <div class="row">
            <button type="submit" class="col-6 offset-3 btn btn-dark shadow-sm my-4">Enviar</button>
        </div>
    </EditForm>
</div>

@code {
    [SupplyParameterFromForm(FormName = "formRegister")]
    public UsuarioSh user { get; set; } = new UsuarioSh
    {
        Contacto = new ContactoSh(),
        Pareja = new ParejaSh(),
        Motocicleta = new MotocicletaSh()
    };

    private string confirmContrasena = string.Empty;
    private List<CapituloSh> capitulos = new List<CapituloSh>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            capitulos = await capituloService.GetCapitulos();
            string jsonCapitulos = JsonSerializer.Serialize(capitulos, new JsonSerializerOptions { WriteIndented = true });
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al obtener capítulos: {ex.Message}");
        }
    }

    private bool formSubmitted = false;
    private bool formError = false;
    public string mensajeError = string.Empty;

    private async Task HandleValidSubmit()
    {
        if (!string.Equals(user.Contraseña, confirmContrasena))
        {
            formError = true;
            return;
        }

        try
        {
            var result = await usuarioService.addUsuario(user);

            if(result.statusCode == 200)
            {
                formSubmitted = true;
                formError = false;

            }
            else
            {
                mensajeError = result.mensaje;
                formSubmitted = false;
                formError = true;
            }

            
        }
        catch (Exception ex)
        {
            mensajeError = "Ocurrio un error al enviar el formulario";
            formError = true;
            Console.WriteLine(ex);
        }
    }
}
